package embed

// Copyright 2020 Inabyte Inc. All rights reserved.
// Use of this source code is governed by a MIT-style
// license that can be found in the LICENSE.md file.

import (
	"io/ioutil"
	"os"
	"path/filepath"
	"reflect"
	"testing"
)

var data = []byte(`// Code generated by embed. DO NOT EDIT.
// +build debug

#include "textflag.h"

DATA ·data+0(SB)/16,$"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
DATA ·data+16(SB)/16,$"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
DATA ·data+32(SB)/13,$"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
GLOBL ·data(SB),RODATA,$45
`)

var goData = []byte(`// Code generated by embed. DO NOT EDIT.
// +build debug
func dataBytes() []byte {
	str := dataString()
	hdr := *(*reflect.StringHeader)(unsafe.Pointer(&str))
	return *(*[]byte)(unsafe.Pointer(&reflect.SliceHeader{
		Data: hdr.Data,
		Len:  hdr.Len,
		Cap:  hdr.Len,
	}))
}

func dataString() string {
	return data
}

const (
	data = "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" +
		"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" +
		"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
)
`)

var amd = []byte(`// Code generated by embed. DO NOT EDIT.
// +build debug

#include "textflag.h"


TEXT ·file_bytes(SB),NOSPLIT,$0-4
	LEAQ	·data(SB), AX
	MOVQ	AX, ret+8(FP)
	MOVL	len+0(FP), AX
	MOVLQSX	AX, AX
	MOVQ	AX, ret+16(FP)
	MOVQ	AX, ret+24(FP)
	RET

TEXT ·file_string(SB),NOSPLIT,$0-4
	LEAQ	·data(SB), AX
	MOVQ	AX, ret+8(FP)
	MOVL	len+0(FP), AX
	MOVLQSX	AX, AX
	MOVQ	AX, ret+16(FP)
	RET
`)

func TestWriter(t *testing.T) {

	tmpdir, _ := ioutil.TempDir("", "writer-test")
	defer os.RemoveAll(tmpdir)

	path := filepath.Join(tmpdir, "files")

	if err := assmemblerFiles.output(path, "debug"); err != nil {

	} else {
		checkFile(t, tmpdir, "files_amd64.s", amd)
	}

	if writer, err := createWriter(path, "debug"); err == nil {
		_, err = writer.Write(make([]byte, 45))

		if err == nil {
			err = writer.footer()
		}

		if err == nil {
			err = writer.Close()
		}

		if o := writer.offset(); o != 45 {
			t.Errorf("offset return bad value expect (45) got (%d)", o)
		}

		if err != nil {
			t.Errorf("got error writing data %v", err)
		} else {

			checkFile(t, tmpdir, "files.s", data)

			err = writer.Close()
			if err == nil {
				t.Errorf("Attempting to close closed writer did not error")
			}
		}
	} else {
		t.Errorf("Could no create writer %v", err)
	}

	file, err := createWriteHeader(path, "_data", ".go", "debug")

	if err != nil {
		t.Errorf("Could no create file %v", err)
	}

	if writer, err := createGoWriter(file); err == nil {
		_, err = writer.Write(make([]byte, 45))

		if err == nil {
			err = writer.footer()
		}

		if err == nil {
			err = writer.Close()
		}

		if o := writer.offset(); o != 45 {
			t.Errorf("offset return bad value expect (45) got (%d)", o)
		}

		if err != nil {
			t.Errorf("got error writing data %v", err)
		} else {

			checkFile(t, tmpdir, "files_data.go", goData)

			err = writer.Close()
			if err == nil {
				t.Errorf("Attempting to close closed writer did not error")
			}
		}
	} else {
		t.Errorf("Could no create writer %v", err)
	}

}

func checkFile(t *testing.T, path string, name string, data []byte) {
	filepath.Join(path, name)

	if b, err := ioutil.ReadFile(filepath.Join(path, name)); err != nil {
		t.Errorf("Could not file file %s", name)
	} else {
		if !reflect.DeepEqual(data, b) {
			t.Errorf("Contents did not match %s got (%s) expect (%s)", name, b, data)
		}
	}
}
