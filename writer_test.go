package embed

// Copyright 2020 Inabyte Inc. All rights reserved.
// Use of this source code is governed by a MIT-style
// license that can be found in the LICENSE.md file.

import (
	"io/ioutil"
	"os"
	"path/filepath"
	"reflect"
	"testing"
)

var data = []byte(`// Code generated by embed. DO NOT EDIT.
// +build debug

#include "textflag.h"

DATA 路filesData+0(SB)/16,$"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
DATA 路filesData+16(SB)/16,$"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
DATA 路filesData+32(SB)/13,$"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
GLOBL 路filesData(SB),(NOPTR+RODATA),$45
`)

var goData = []byte(`// Code generated by embed. DO NOT EDIT.
// +build debug

package assets

const (
	filesData = "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" +
		"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" +
		"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
)
`)

func TestWriter(t *testing.T) {

	tmpdir, _ := ioutil.TempDir("", "writer-test")
	defer os.RemoveAll(tmpdir)

	pkg := "assets"
	name := "files"
	path := filepath.Join(tmpdir, name)

	for _, test := range []struct {
		name   string
		isGo   bool
		file   string
		expect []byte
	}{
		{"Asm Writer", false, "files_data.s", data},
		{"Go Writer", true, "files_data.go", goData},
	} {
		t.Run(test.name, func(t *testing.T) {
			if writer, err := createWriter(test.isGo, pkg, name, path, "debug"); err == nil {
				_, err = writer.Write(make([]byte, 45))

				if err == nil {
					err = writer.Close()
				}

				if o := writer.offset(); o != 45 {
					t.Errorf("offset return bad value expect (45) got (%d)", o)
				}

				if err != nil {
					t.Errorf("got error writing data %v", err)
				} else {

					checkFile(t, tmpdir, test.file, test.expect)

					err = writer.Close()
					if err == nil {
						t.Errorf("Attempting to close closed writer did not error")
					}
				}
			} else {
				t.Errorf("Could no create writer %v", err)
			}
		})
	}
}

func checkFile(t *testing.T, path string, name string, data []byte) {
	filepath.Join(path, name)

	if b, err := ioutil.ReadFile(filepath.Join(path, name)); err != nil {
		t.Errorf("Could not file file %s", name)
	} else {
		if !reflect.DeepEqual(data, b) {
			t.Errorf("Contents did not match %s got (%s) expect (%s)", name, b, data)
		}
	}
}
